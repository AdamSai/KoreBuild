use assembly="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
use namespace="System"
use namespace="System.Globalization"
use namespace="System.IO"
use namespace="System.Linq"
use namespace="System.Threading.Tasks"
use import="Environment"
use import="Files"
use import="Json"

default BASE_DIR='${Directory.GetCurrentDirectory()}'
default TARGET_DIR='${Path.Combine(BASE_DIR, "artifacts")}'
default BUILD_DIR='${Path.Combine(TARGET_DIR, "build")}'

functions @{
    private static bool Quiet { get; set; }
}

#nuget-install description='Install NuGet packages to local repo'
  -if (Directory.Exists("src") && Directory.Exists(BUILD_DIR)) {
    nuget-packages-add sourcePackagesDir='${BUILD_DIR}' targetPackagesDir='${E("PACKAGES_PUBLISH_DIR")}'
    nuget-resilient-publish sourcePackagesDir='${BUILD_DIR}' nugetFeed='${E("NUGET_PUBLISH_FEED")}' if='!string.IsNullOrEmpty(E("NUGET_PUBLISH_FEED"))'
  -}

functions @{
    string E(string key) { return Environment.GetEnvironmentVariable(key); }
    void E(string key, string value) { Environment.SetEnvironmentVariable(key, value); }
    void AddToE(string key, string append)
    {
      var original = E(key);
      if (string.IsNullOrEmpty(original))
      {
        E(key, append);
      }
      else
      {
        E(key, original + " " + append);
      }
    }

    IEnumerable<string> GetDirectoriesContaining(string path, string searchPattern)
    {
      var sep = Path.DirectorySeparatorChar;
      // Don't include directories that are children of a node_modules or bower_components directory
      return Directory.GetFiles(path, searchPattern, SearchOption.AllDirectories)
                      .Where(p => p.IndexOf(sep + "node_modules" + sep) < 0 &&
                                  p.IndexOf(sep + "bower_components" + sep) < 0 &&
                                  p.IndexOf(sep + "wwwroot" + sep + "lib" + sep) < 0)
                      .Select(p => Path.GetDirectoryName(p))
                      .Distinct();
    }

    bool TestCommand(string program, string commandline)
    {
      // Tests whether a given command succeeds at the command line.
      // Useful for testing whether a given command is installed and on the path, e.g. node
      ProcessStartInfo processStartInfo;

      if(!IsLinux)
      {
        processStartInfo = new ProcessStartInfo {
        UseShellExecute = false,
        FileName = "cmd",
        Arguments = "/C " + program + " " + commandline,
        };
      } else
      {
        processStartInfo = new ProcessStartInfo {
        UseShellExecute = false,
        FileName = program,
        Arguments = commandline,
        };
      }
      try
      {
        Log.Info(string.Format("Testing for command: {0} {1}", program, commandline));
        var process = Process.Start(processStartInfo);
        process.WaitForExit();
        if (process.ExitCode == 0)
        {
          Log.Info("   command found (0 exit code)");
          return true;
        }
        else
        {
          Log.Warn("   command not found (non-0 exit code)");
          return false;
        }
      }
      catch (Exception ex)
      {
        Log.Warn("   command exception: " + ex.ToString());
        Log.Warn("   command not found");
        return false;
      }
    }
}

macro name='Exec' program='string' commandline='string'
    exec

macro name='Exec' program='string' commandline='string' workingdir='string'
    exec

macro name='ExecClr' program='string' commandline='string'
    exec-clr

macro name='ExecClr' program='string' commandline='string' workingdir='string'
    exec-clr

macro name="DeleteFolder" delete='string'
    directory

macro name="Copy" sourceDir='string' outputDir='string' include='string' overwrite='bool'
    copy

macro name="CopyFolder" sourceDir='string' outputDir='string' overwrite='bool'
    copy

macro name='Dotnet' command='string'
    dotnet

macro name='Dotnet' command='string' dotnetDir='string'
    dotnet

macro name="DotnetBuild" projectFile='string' configuration='string' framework='string'
    dotnet-build

macro name="DotnetPack" projectFile='string' dotnetPackOutputDir='string' configuration='string' pack_options='string'
    dotnet-pack

macro name="DotnetPublish" projectFile='string' outputFolder='string' framework='string' configuration='string'
    dotnet-publish

macro name='Npm' npmCommand='string' npmDir='string'
    npm

macro name="UpdateResx" resxFile='string'
    k-generate-resx

macro name='GitCommand' gitCommand='string'
    git
